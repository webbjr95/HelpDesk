@model HelpDeskCodingExercise.Models.TicketModels

@{
    ViewBag.Title = "Create";
}

<h1 style="font-size:26px; font-weight:800;">Create a Support Ticket</h1>

<hr>

<span>
    <button class="btn btn-default">
        @Html.ActionLink("Back to Home", "Index", "Home")
    </button>
</span>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        @*
            Going to have the ticket creation form only have 3 values while the others will be auto
            filled via the TicketsModels:
            1. Title
            2. Description
            3. Severity
        *@
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "control-label col-md-2" }, rows = "6", cols = "50" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        @*
            NOTE: GetNames allows the enum values to display their name instead of their int position.
            Currently using an enum structure to store the predefined options available here.
        *@
        <div class="form-group">
            @Html.LabelFor(model => model.Severity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Severity,
                                 new SelectList(Enum.GetNames(typeof(HelpDeskCodingExercise.Models.TicketModels.SeverityTypeDropDown))),
                                 "Select Severity")
                @Html.ValidationMessageFor(model => model.Severity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
